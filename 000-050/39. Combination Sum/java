class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
      List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(candidates); 
        backtrack(candidates, target, 0, new ArrayList<>(), result);
        return result;
    }

    private void backtrack(int[] candidates, int remainingTarget, int startIndex,
                           List<Integer> currentCombination, List<List<Integer>> result) {
        if (remainingTarget == 0) {
         
            result.add(new ArrayList<>(currentCombination));
            return;
        }

        for (int i = startIndex; i < candidates.length; i++) {
            int candidate = candidates[i];

            
            if (candidate > remainingTarget) {
                break; 
            }

        
            currentCombination.add(candidate);

        
            backtrack(candidates, remainingTarget - candidate, i, currentCombination, result);

        
            currentCombination.remove(currentCombination.size() - 1);
        }  
}
}
