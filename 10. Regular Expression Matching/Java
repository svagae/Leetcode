class Solution {
   public boolean isMatch(String s, String p) {
    int m = s.length(), n = p.length();
    boolean[][] dp = new boolean[m + 1][n + 1];
    dp[0][0] = true;
    
    // Initialize first row (empty string case)
    for (int j = 1; j <= n; j++) {
        if (p.charAt(j - 1) == '*' && j >= 2) {
            dp[0][j] = dp[0][j - 2];
        }
    }
    
    for (int i = 1; i <= m; i++) {
        for (int j = 1; j <= n; j++) {
            if (p.charAt(j - 1) == '*') {
                // Check if j >= 2 to avoid index out of bounds
                if (j >= 2) {
                    // Zero occurrence of the character before '*'
                    dp[i][j] = dp[i][j - 2];
                    // One or more occurrences if the preceding character matches
                    if (p.charAt(j - 2) == '.' || p.charAt(j - 2) == s.charAt(i - 1)) {
                        dp[i][j] = dp[i][j] || dp[i - 1][j];
                    }
                }
            } else {
                // Direct match or '.' which matches any character
                if (p.charAt(j - 1) == '.' || p.charAt(j - 1) == s.charAt(i - 1)) {
                    dp[i][j] = dp[i - 1][j - 1];
                }
            }
        }
    }
    return dp[m][n];
}
}
